name: Infra CI Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target Environment'
        required: true
        default: 'local'
        type: choice
        options:
          - dev
          - staging
          - prod
          - local
      package_version:
        required: true
        description: new package version

jobs:
  build-and-publish:
    name: 1 - Build js bundle and publish it
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set UPPER_ENV variable
        run: |
          echo "ENV=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "UPPER_ENV=$(echo ${{ github.event.inputs.environment }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV
          echo "LOWER_ENV=$(echo '${{ github.event.inputs.environment }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Set GCLOUD_PROJECT_ID_ENV variable
        if: ${{ env.LOWER_ENV != 'local' }}
        run: echo "GCLOUD_PROJECT_ID_ENV=GCLOUD_PROJECT_ID_${{ env.UPPER_ENV }}" >> $GITHUB_ENV

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        if: ${{ env.LOWER_ENV != 'local' }}
        with:
          credentials_json: ${{ secrets.GOOGLE_CREDENTIALS }}

      - name: Fetch GCLOUD_PROJECT_ID
        id: fetch_project_id
        if: ${{ env.LOWER_ENV != 'local' }}
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |
            GCLOUD_PROJECT_ID:${{ secrets.GCLOUD_INFRA_PROJECT_ID }}/${{ env.GCLOUD_PROJECT_ID_ENV }}/latest

      - name: Export GCLOUD_PROJECT_ID
        if: ${{ env.LOWER_ENV != 'local' }}
        run: echo "GCLOUD_PROJECT_ID=${{ steps.fetch_project_id.outputs.GCLOUD_PROJECT_ID }}" >> $GITHUB_ENV

      - name: Fetch secrets from Secret Manager
        id: fetch_secrets
        if: ${{ env.LOWER_ENV != 'local' }}
        uses: google-github-actions/get-secretmanager-secrets@v1
        with:
          secrets: |
            NUXT_PUBLIC_BACKEND_API_URL:${{ env.GCLOUD_PROJECT_ID }}/NUXT_PUBLIC_BACKEND_API_URL/latest

      - name: Export secrets to env
        if: ${{ env.LOWER_ENV != 'local' }}
        run: |
          echo "NUXT_PUBLIC_BACKEND_API_URL=${{ steps.fetch_secrets.outputs.NUXT_PUBLIC_BACKEND_API_URL }}" >> $GITHUB_ENV

      - name: Export secrets to env (local)
        if: ${{ env.LOWER_ENV == 'local' }}
        run: |
          echo "NUXT_PUBLIC_BACKEND_API_URL=http://localhost:3000" >> $GITHUB_ENV

      - name: Set PACKAGE_VERSION (prod)
        if: ${{ env.LOWER_ENV == 'prod' }}
        run: echo "PACKAGE_VERSION=$(echo '${{ github.event.inputs.package_version }}')" >> $GITHUB_ENV

      - name: Set PACKAGE_VERSION (prod)
        if: ${{ env.LOWER_ENV != 'prod' }}
        run: echo "PACKAGE_VERSION=$(echo '${{ github.event.inputs.package_version }}-${{ env.LOWER_ENV }}')" >> $GITHUB_ENV

      - name: Set package.json file
        run: envsubst < package.template.json > package.json

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: true

      - name: Build .js bundle
        run: pnpm run build
        env:
          NUXT_PUBLIC_BACKEND_API_URL: ${{ env.NUXT_PUBLIC_BACKEND_API_URL }}

      - name: Setup npm auth
        run: echo "//registry.npmjs.org/:_authToken=${{ secrets.NPMJS_TOKEN }}" > ~/.npmrc

      - name: Swap in README.npm.md for publish
        run: |
          rm README.md
          mv README.npm.md README.md

      - name: Publish to npm (prod)
        if: ${{ env.LOWER_ENV == 'prod' }}
        run: pnpm publish --no-git-checks --access public

      - name: Publish to npm (dev or staging)
        if: ${{ env.LOWER_ENV != 'prod' }}
        run: pnpm publish --no-git-checks --access public --tag ${{ env.LOWER_ENV }}
